# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import namenode_pb2 as namenode__pb2


class LocateChunkStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LocateChunk = channel.unary_unary(
                '/LocateChunk/LocateChunk',
                request_serializer=namenode__pb2.ChunkLocation.SerializeToString,
                response_deserializer=namenode__pb2.Response.FromString,
                )


class LocateChunkServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LocateChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LocateChunkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LocateChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.LocateChunk,
                    request_deserializer=namenode__pb2.ChunkLocation.FromString,
                    response_serializer=namenode__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LocateChunk', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LocateChunk(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LocateChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LocateChunk/LocateChunk',
            namenode__pb2.ChunkLocation.SerializeToString,
            namenode__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HeartBeatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HeartBeat = channel.unary_unary(
                '/HeartBeat/HeartBeat',
                request_serializer=namenode__pb2.Socket.SerializeToString,
                response_deserializer=namenode__pb2.Response.FromString,
                )


class HeartBeatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeartBeatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=namenode__pb2.Socket.FromString,
                    response_serializer=namenode__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HeartBeat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HeartBeat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HeartBeat/HeartBeat',
            namenode__pb2.Socket.SerializeToString,
            namenode__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FetchStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchSocket = channel.unary_unary(
                '/Fetch/FetchSocket',
                request_serializer=namenode__pb2.VoidRequest.SerializeToString,
                response_deserializer=namenode__pb2.Sockets.FromString,
                )
        self.FetchLocations = channel.unary_unary(
                '/Fetch/FetchLocations',
                request_serializer=namenode__pb2.VoidRequest.SerializeToString,
                response_deserializer=namenode__pb2.Metadata.FromString,
                )


class FetchServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchSocket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchLocations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FetchServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchSocket': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchSocket,
                    request_deserializer=namenode__pb2.VoidRequest.FromString,
                    response_serializer=namenode__pb2.Sockets.SerializeToString,
            ),
            'FetchLocations': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchLocations,
                    request_deserializer=namenode__pb2.VoidRequest.FromString,
                    response_serializer=namenode__pb2.Metadata.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Fetch', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Fetch(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchSocket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Fetch/FetchSocket',
            namenode__pb2.VoidRequest.SerializeToString,
            namenode__pb2.Sockets.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Fetch/FetchLocations',
            namenode__pb2.VoidRequest.SerializeToString,
            namenode__pb2.Metadata.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
