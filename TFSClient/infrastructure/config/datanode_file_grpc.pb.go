// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: datanode_file.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	WriteChunk(ctx context.Context, in *ChunkWriteRequest, opts ...grpc.CallOption) (*ChunkWriteResponse, error)
	ReadChunk(ctx context.Context, in *ChunkReadRequest, opts ...grpc.CallOption) (*ChunkReadResponse, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) WriteChunk(ctx context.Context, in *ChunkWriteRequest, opts ...grpc.CallOption) (*ChunkWriteResponse, error) {
	out := new(ChunkWriteResponse)
	err := c.cc.Invoke(ctx, "/DataNodeService/WriteChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) ReadChunk(ctx context.Context, in *ChunkReadRequest, opts ...grpc.CallOption) (*ChunkReadResponse, error) {
	out := new(ChunkReadResponse)
	err := c.cc.Invoke(ctx, "/DataNodeService/ReadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility
type DataNodeServiceServer interface {
	WriteChunk(context.Context, *ChunkWriteRequest) (*ChunkWriteResponse, error)
	ReadChunk(context.Context, *ChunkReadRequest) (*ChunkReadResponse, error)
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServiceServer struct {
}

func (UnimplementedDataNodeServiceServer) WriteChunk(context.Context, *ChunkWriteRequest) (*ChunkWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteChunk not implemented")
}
func (UnimplementedDataNodeServiceServer) ReadChunk(context.Context, *ChunkReadRequest) (*ChunkReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChunk not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s grpc.ServiceRegistrar, srv DataNodeServiceServer) {
	s.RegisterService(&DataNodeService_ServiceDesc, srv)
}

func _DataNodeService_WriteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).WriteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataNodeService/WriteChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).WriteChunk(ctx, req.(*ChunkWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_ReadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).ReadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataNodeService/ReadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).ReadChunk(ctx, req.(*ChunkReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNodeService_ServiceDesc is the grpc.ServiceDesc for DataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteChunk",
			Handler:    _DataNodeService_WriteChunk_Handler,
		},
		{
			MethodName: "ReadChunk",
			Handler:    _DataNodeService_ReadChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datanode_file.proto",
}
